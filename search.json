[{"path":"https://sidex71.github.io/ULM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sodiq . Hameed. Author, maintainer. Luis F. Iglesias-Martinez. Author. Walter Kolch. Author. Vadim Zhernovkov. Author.","code":""},{"path":"https://sidex71.github.io/ULM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hameed S, Iglesias-Martinez L, Kolch W, Zhernovkov V (2025). ULM: Inferring Physical Cell-cell Interaction Networks ScRNAseq Data. R package version 0.1.0, https://sidex71.github.io/ULM/, https://github.com/Sidex71/ULM.","code":"@Manual{,   title = {ULM: Inferring Physical Cell-cell Interaction Networks from ScRNAseq Data},   author = {Sodiq A. Hameed and Luis F. Iglesias-Martinez and Walter Kolch and Vadim Zhernovkov},   year = {2025},   note = {R package version 0.1.0, https://sidex71.github.io/ULM/},   url = {https://github.com/Sidex71/ULM}, }"},{"path":"https://sidex71.github.io/ULM/index.html","id":"ulm","dir":"","previous_headings":"","what":"Inferring Physical Cell-cell Interaction Networks from ScRNAseq Data","title":"Inferring Physical Cell-cell Interaction Networks from ScRNAseq Data","text":"R package prediction identification multiplets scRNAseq datasets infer physical cell-cell interaction networks. Multiplets occur naturally conventional scRNAseq due incomplete dissociation library preparation. represent cells physically connected interacting tissues become sequenced together remain unseperated. ULM utilizes signature-based approach univariate linear models fitted barcode scRNAseq data assign signature scores. Barcodes classified singlets multiplets based signature scores. Multiplets barcodes cells enriched two cell type-specific gene signatures.","code":""},{"path":"https://sidex71.github.io/ULM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Inferring Physical Cell-cell Interaction Networks from ScRNAseq Data","text":"can install development version ULM GitHub :","code":"if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") } library(devtools)  #devtools::install_github(\"Sidex71/ULM\", build_vignettes = T)"},{"path":"https://sidex71.github.io/ULM/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Inferring Physical Cell-cell Interaction Networks from ScRNAseq Data","text":"quick example shows infer physical cell-cell interaction network scRNAseq data:","code":"library(ULM) ####load dataset data(\"int_singData\")  ##int_singData is a preprocessed scRNAseq seurat object with a Cell_Type column containing cell annotations. ##generate signatures set.seed(101324) int_sig <- ULM::GetSignature(int_singData, ident_col = int_singData$Cell_Type, n = 100) #> using the specified seurat ident to generate signatures #> Calculating cluster Progenitor early #> Calculating cluster Progenitor late-1 #> Calculating cluster Transit amplifying #> Calculating cluster Progenitor late-2 #> Calculating cluster Goblet #> Calculating cluster Stem #> Calculating cluster Enterocyte #> Calculating cluster Paneth #> Calculating cluster Enteroendocrine #> Calculating cluster Tuft  ###score cells and assign labels my_scores <- GetCellScores(seurat_obj = int_singData, signatures = int_sig, assay = 'RNA', slot = 'data') my_assign <- GetCellAssignments(score_data = my_scores, cut_off = 1, p_val = 0.05) int_singData <- AddMetaObject(int_singData, cell_class_df = my_assign)  #####filter multiplets my_mult_filt <- FilterMultiplet(int_singData, minCells = 2, minFreq = 10) #> Warning: Removing 1929 cells missing data for vars requested multSummaryFilt <- my_mult_filt$multSummaryFilt  ###plot network my_node_df <- GetNodeDF(mat = multSummaryFilt) PlotNetwork(my_node_df)"},{"path":"https://sidex71.github.io/ULM/reference/AddMetaObject.html","id":null,"dir":"Reference","previous_headings":"","what":"adding cell assignments to seurat object — AddMetaObject","title":"adding cell assignments to seurat object — AddMetaObject","text":"'AddMtaObject()' function add predicted cell labels metadata scRNAseq","code":""},{"path":"https://sidex71.github.io/ULM/reference/AddMetaObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adding cell assignments to seurat object — AddMetaObject","text":"","code":"AddMetaObject(seurat_obj, cell_class_df)"},{"path":"https://sidex71.github.io/ULM/reference/AddMetaObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adding cell assignments to seurat object — AddMetaObject","text":"seurat_obj prepossessed Seurat object storing scRNAseq data cell_class_df data frame cell barcodes cell type assignments, ideally obtained output GetCellAssignments() function.","code":""},{"path":"https://sidex71.github.io/ULM/reference/AddMetaObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adding cell assignments to seurat object — AddMetaObject","text":"new Seurat object updated metadata containing predicted cell labels \"celltype_ulm\" column","code":""},{"path":"https://sidex71.github.io/ULM/reference/AddMetaObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"adding cell assignments to seurat object — AddMetaObject","text":"","code":"data(int_multData) data(int_signature) my_scores <- GetCellScores(seurat_obj = int_multData[,1:1000], signatures = int_signature, assay = 'RNA', slot = 'data') my_ass <- GetCellAssignments(score_data = my_scores) new_obj <- AddMetaObject(seurat_obj = int_multData[,1:1000], cell_class_df = my_ass) head(new_obj$celltype_ulm, 20) #>                      AAACCCACAAATCGTC                      AAACCCACACAACGCC  #>                    \"Progenitor.early\"                   \"Progenitor.late.2\"  #>                      AAACCCAGTATCTCGA                      AAACCCAGTCATGCAT  #>                              \"Goblet\"                              \"Goblet\"  #>                      AAACGAAAGGTAGTCG                      AAACGAACACCAACAT  #>                              \"Goblet\"                       \"Goblet_Paneth\"  #>                      AAACGAAGTATCGAAA                      AAACGAATCCGTAGGC  #>                                    NA        \"Enterocyte_Progenitor.late.1\"  #>                      AAACGCTCAACGGGTA                      AAACGCTCAGCCTACG  #>        \"Enterocyte_Progenitor.late.1\" \"Progenitor.early_Transit.amplifying\"  #>                      AAACGCTGTATGAGAT                      AAACGCTTCATGGAGG  #>                    \"Progenitor.early\"                              \"Goblet\"  #>                      AAACGCTTCTTCTAAC                      AAAGAACAGACATCAA  #>                                \"Tuft\"                              \"Goblet\"  #>                      AAAGAACAGGCTTCCG                      AAAGAACCAGAGACTG  #> \"Progenitor.late.1_Progenitor.late.2\"                              \"Goblet\"  #>                      AAAGAACCAGCAGAAC                      AAAGAACCAGCGACCT  #>                                    NA                              \"Goblet\"  #>                      AAAGAACGTCCACAGC                      AAAGGATGTCATCAGT  #>                   \"Progenitor.late.1\"                              \"Goblet\""},{"path":"https://sidex71.github.io/ULM/reference/FilterMultiplet.html","id":null,"dir":"Reference","previous_headings":"","what":"filtering multiplets — FilterMultiplet","title":"filtering multiplets — FilterMultiplet","text":"'FilterMultiplet()' function filter multiplets predefined frequency","code":""},{"path":"https://sidex71.github.io/ULM/reference/FilterMultiplet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filtering multiplets — FilterMultiplet","text":"","code":"FilterMultiplet(seurat_obj, minCells = 2, minFreq = 10)"},{"path":"https://sidex71.github.io/ULM/reference/FilterMultiplet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filtering multiplets — FilterMultiplet","text":"seurat_obj Seurat object metadata containing predicted cell labels \"celltype_ulm\" column number cells \"count_ulm\" column. Ideally output AddMetObject() function multiplet Seurat object GetMultiplet() function minCells numeric value specifying minimum number cells. Default 2 include doublets /higher order multiplets minFreq numeric value specifying minimum frequency multiplet type retained. Default 10.","code":""},{"path":"https://sidex71.github.io/ULM/reference/FilterMultiplet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filtering multiplets — FilterMultiplet","text":"filtered list containing Seurat object multiplets dataframe multiplet distribution summary.","code":""},{"path":"https://sidex71.github.io/ULM/reference/FilterMultiplet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"filtering multiplets — FilterMultiplet","text":"","code":"data(int_multData) data(int_signature) my_scores <- GetCellScores(seurat_obj = int_multData[,1:1000], signatures = int_signature, assay = 'RNA', slot = 'data') my_ass <- GetCellAssignments(score_data = my_scores) new_obj <- AddMetaObject(seurat_obj = int_multData[,1:1000], cell_class_df = my_ass) my_mult <- GetMultiplet(seurat_obj = new_obj) #> Warning: Removing 223 cells missing data for vars requested my_mult_filt <- FilterMultiplet(seurat_obj = new_obj) #> Warning: Removing 223 cells missing data for vars requested my_mult_filt #> $multSummaryFilt #>                                     multipletType frequency #> 3                    Enterocyte_Progenitor.late.1        69 #> 4  Enterocyte_Progenitor.late.1_Progenitor.late.2        15 #> 7                                   Goblet_Paneth        56 #> 8                         Goblet_Progenitor.early        24 #> 20            Progenitor.early_Transit.amplifying        21 #> 21            Progenitor.late.1_Progenitor.late.2        57 #>  #> $multObjFilt #> An object of class Seurat  #> 15615 features across 242 samples within 1 assay  #> Active assay: RNA (15615 features, 2000 variable features) #>  3 layers present: counts, data, scale.data #>  2 dimensional reductions calculated: pca, umap #>"},{"path":"https://sidex71.github.io/ULM/reference/GetCellAssignments.html","id":null,"dir":"Reference","previous_headings":"","what":"getting final cell assignments — GetCellAssignments","title":"getting final cell assignments — GetCellAssignments","text":"'GetCellAssignments()' function assigns cell type labels barcode based signature scores","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetCellAssignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getting final cell assignments — GetCellAssignments","text":"","code":"GetCellAssignments(score_data, p_val = 0.05, cut_off = 1)"},{"path":"https://sidex71.github.io/ULM/reference/GetCellAssignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getting final cell assignments — GetCellAssignments","text":"score_data data frame cell barcodes gene signature scores, ideally obtained output GetCellScores() function. p_val numeric value specifying p value cut-filter significant signature scores (default: 0.05) cut_off numeric value specifying cut-signature scores (default: 1)","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetCellAssignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getting final cell assignments — GetCellAssignments","text":"data frame cell barcodes cell type assignments. barcode may assigned single multi cell type assignment depending signature enrichment scores.","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetCellAssignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getting final cell assignments — GetCellAssignments","text":"","code":"data(int_singData) data(int_signature) my_scores <- GetCellScores(seurat_obj = int_singData[,1:1000], signatures = int_signature, assay = 'RNA', slot = 'data') my_ass <- GetCellAssignments(score_data = my_scores) head(my_ass) #>            barcode statistic count_ulm                        celltype_ulm #> 1 AAAGGTATCGGCTTCT       ulm         2        Enterocyte_Progenitor.late.1 #> 2 AACAGGGAGAAGTCAT       ulm         2        Enterocyte_Progenitor.late.1 #> 3 AACCAACCATCAGCAT       ulm         2        Enterocyte_Progenitor.late.1 #> 4 AACCTGAGTACCGTCG       ulm         3 Enterocyte_Paneth_Progenitor.late.1 #> 5 AACGAAACAAGCGCAA       ulm         2        Enterocyte_Progenitor.late.1 #> 6 AACGAAACAGGTCCCA       ulm         2        Enterocyte_Progenitor.late.1 #>     avg_pvalue avg_score #> 1 2.523098e-13  8.319202 #> 2 2.424298e-15  8.761571 #> 3 9.232242e-16  8.127915 #> 4 8.578408e-06  7.990285 #> 5 2.859176e-09  5.994553 #> 6 1.859488e-17  8.907267"},{"path":"https://sidex71.github.io/ULM/reference/GetCellScores.html","id":null,"dir":"Reference","previous_headings":"","what":"scoring cells for gene signatures — GetCellScores","title":"scoring cells for gene signatures — GetCellScores","text":"'GetCellScores()' scores cell scRNAseq data cell type-specific gene signatures","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetCellScores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scoring cells for gene signatures — GetCellScores","text":"","code":"GetCellScores(seurat_obj, signatures, assay = \"RNA\", slot = \"data\")"},{"path":"https://sidex71.github.io/ULM/reference/GetCellScores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scoring cells for gene signatures — GetCellScores","text":"seurat_obj prepossessed Seurat object storing scRNAseq data signatures data frame cell type signatures cell types source column, genes target column, weights mor column. Ideally output GetSignature() function. assay character specifying assay Seurat object containing count matrix. slot character specifying slot draw counts . can 'counts' raw counts, 'data' normalized counts, 'scaled' scaled counts.","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetCellScores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"scoring cells for gene signatures — GetCellScores","text":"data frame cell barcodes gene signature scores","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetCellScores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"scoring cells for gene signatures — GetCellScores","text":"","code":"data(int_singData) data(int_signature) my_scores <- GetCellScores(seurat_obj = int_singData[,1:1000], signatures = int_signature, assay = 'RNA', slot = 'data') head(my_scores) #> # A tibble: 6 × 5 #>   barcode          celltype   score   p_value statistic #>   <chr>            <chr>      <dbl>     <dbl> <chr>     #> 1 AAACGAAAGAGGTCGT Enterocyte -3.20 0.00136   ulm       #> 2 AAACGAAAGCCTCCAG Enterocyte -3.30 0.000974  ulm       #> 3 AAACGAAAGTTTGGCT Enterocyte -3.88 0.000106  ulm       #> 4 AAACGAACACAAGCTT Enterocyte -4.31 0.0000164 ulm       #> 5 AAACGAAGTCGCTTGG Enterocyte -1.22 0.221     ulm       #> 6 AAACGAAGTCTTACTT Enterocyte -4.01 0.0000622 ulm"},{"path":"https://sidex71.github.io/ULM/reference/GetMultiplet.html","id":null,"dir":"Reference","previous_headings":"","what":"obtaining multiplet data — GetMultiplet","title":"obtaining multiplet data — GetMultiplet","text":"'GetMultiplet()' function extract predicted multiplets","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetMultiplet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"obtaining multiplet data — GetMultiplet","text":"","code":"GetMultiplet(seurat_obj, minCells = 2)"},{"path":"https://sidex71.github.io/ULM/reference/GetMultiplet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"obtaining multiplet data — GetMultiplet","text":"seurat_obj Seurat object metadata containing predicted cell labels \"celltype_ulm\" column number cells \"count_ulm\" column. Ideally output AddMetObject() function minCells numeric value specifying minimum number cells. Default 2 include doublets /higher order multiplets","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetMultiplet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"obtaining multiplet data — GetMultiplet","text":"list containing Seurat object multiplets multiplet distribution summary","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetMultiplet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"obtaining multiplet data — GetMultiplet","text":"","code":"data(int_multData) data(int_signature) my_scores <- GetCellScores(seurat_obj = int_multData[,1:1000], signatures = int_signature, assay = 'RNA', slot = 'data') my_ass <- GetCellAssignments(score_data = my_scores) new_obj <- AddMetaObject(seurat_obj = int_multData[,1:1000], cell_class_df = my_ass) my_mult <- GetMultiplet(seurat_obj = new_obj) #> Warning: Removing 223 cells missing data for vars requested my_mult #> $multSummary #>                                            multipletType frequency #> 1  Enterocyte_Goblet_Progenitor.late.1_Progenitor.late.2         1 #> 2                    Enterocyte_Paneth_Progenitor.late.1         1 #> 3                           Enterocyte_Progenitor.late.1        69 #> 4         Enterocyte_Progenitor.late.1_Progenitor.late.2        15 #> 5                      Enterocyte_Progenitor.late.1_Tuft         1 #> 6                     Enteroendocrine_Transit.amplifying         1 #> 7                                          Goblet_Paneth        56 #> 8                                Goblet_Progenitor.early        24 #> 9             Goblet_Progenitor.early_Transit.amplifying         2 #> 10                              Goblet_Progenitor.late.1         1 #> 11            Goblet_Progenitor.late.1_Progenitor.late.2         1 #> 12                              Goblet_Progenitor.late.2         2 #> 13                             Goblet_Transit.amplifying         9 #> 14                               Paneth_Progenitor.early         5 #> 15                              Paneth_Progenitor.late.1         1 #> 16            Paneth_Progenitor.late.1_Progenitor.late.2         1 #> 17                                           Paneth_Stem         2 #> 18                             Paneth_Transit.amplifying         4 #> 19                    Progenitor.early_Progenitor.late.1         1 #> 20                   Progenitor.early_Transit.amplifying        21 #> 21                   Progenitor.late.1_Progenitor.late.2        57 #> 22              Progenitor.late.1_Progenitor.late.2_Tuft         2 #>  #> $multObj #> An object of class Seurat  #> 15615 features across 277 samples within 1 assay  #> Active assay: RNA (15615 features, 2000 variable features) #>  3 layers present: counts, data, scale.data #>  2 dimensional reductions calculated: pca, umap #>"},{"path":"https://sidex71.github.io/ULM/reference/GetNodeDF.html","id":null,"dir":"Reference","previous_headings":"","what":"getting nodes and edges — GetNodeDF","title":"getting nodes and edges — GetNodeDF","text":"'GetNodeDF()' function generate nodes edges multiplet data","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetNodeDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getting nodes and edges — GetNodeDF","text":"","code":"GetNodeDF(mat)"},{"path":"https://sidex71.github.io/ULM/reference/GetNodeDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getting nodes and edges — GetNodeDF","text":"mat data frame multiplets types frequencies, ideally summary data frame obtained FilterMultiplet() GetMultiplet() function.","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetNodeDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getting nodes and edges — GetNodeDF","text":"data frame cell-cell edges nodes corresponding frequencies","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetNodeDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getting nodes and edges — GetNodeDF","text":"","code":"mat <- data.frame('multilpetType' = c(paste('A', 'B', 'C', sep = '_'),                                       paste('A', 'B', sep = '_'),                                       paste('B', 'C', 'A', 'E', sep = '_'),                                       paste('D', 'C', 'E', sep = '_')),                   frequency = rep(50, 4))  mat #>   multilpetType frequency #> 1         A_B_C        50 #> 2           A_B        50 #> 3       B_C_A_E        50 #> 4         D_C_E        50 GetNodeDF(mat) #>    Cell1 Cell2 n_cells #> 1      B     A      50 #> 2      C     A      50 #> 3      A     B     100 #> 4      A     C      50 #> 5      B     C     100 #> 6      D     C      50 #> 7      A     E      50 #> 8      B     E      50 #> 9      C     E     100 #> 10     D     E      50"},{"path":"https://sidex71.github.io/ULM/reference/GetSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"generating gene signature — GetSignature","title":"generating gene signature — GetSignature","text":"'GetSignature()' generates cell type-specific gene signatures scRNAseq data","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generating gene signature — GetSignature","text":"","code":"GetSignature(seurat_obj, ident_col = NULL, n = 100, p_val = 0.05)"},{"path":"https://sidex71.github.io/ULM/reference/GetSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generating gene signature — GetSignature","text":"seurat_obj prepossessed Seurat object storing scRNAseq data ident_col column Seurat object metadata character vector storing cell names labels. specified, default ident Seurat object used. n numeric value specifying number genes used cell signature. Default 100 genes per cell type. p_val numeric value specifying adjusted p-value cut-","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetSignature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generating gene signature — GetSignature","text":"dataframe cell type signatures.","code":""},{"path":"https://sidex71.github.io/ULM/reference/GetSignature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generating gene signature — GetSignature","text":"","code":"data(int_singData) int_sig <- GetSignature(seurat_obj = int_singData[,1:1000], ident_col = int_singData$Cell_Type) #> using the specified seurat ident to generate signatures #> Calculating cluster Progenitor early #> Calculating cluster Progenitor late-1 #> Calculating cluster Transit amplifying #> Calculating cluster Progenitor late-2 #> Calculating cluster Goblet #> Calculating cluster Stem #> Calculating cluster Enterocyte #> Calculating cluster Paneth #> Calculating cluster Enteroendocrine #> Calculating cluster Tuft head(int_sig) #> # A tibble: 6 × 3 #> # Groups:   source [1] #>   source           target          mor #>   <chr>            <chr>         <dbl> #> 1 Progenitor early C330021F23Rik     1 #> 2 Progenitor early Cdc25c            1 #> 3 Progenitor early Knstrn            1 #> 4 Progenitor early Ccnb2             1 #> 5 Progenitor early Cdkn3             1 #> 6 Progenitor early Cenpa             1"},{"path":"https://sidex71.github.io/ULM/reference/PlotNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"plotting network — PlotNetwork","title":"plotting network — PlotNetwork","text":"'PlotNetwork()' function plot customizable cell-cell interaction network graph","code":""},{"path":"https://sidex71.github.io/ULM/reference/PlotNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotting network — PlotNetwork","text":"","code":"PlotNetwork(   network_df,   node_size = 20,   node_color = \"blue\",   node_text_size = 4,   edge_width_factor = 50,   edge_color = \"red\",   network_layout = \"fr\",   legend_title = \"Scaled Counts\",   legend_position = \"bottom\",   min_edge_width = 0.5,   max_edge_width = 3,   main = \"Network Plot\",   main_size = 15,   hjust = 0.5,   legend_text_size = 12,   legend_title_size = 14 )"},{"path":"https://sidex71.github.io/ULM/reference/PlotNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotting network — PlotNetwork","text":"network_df data frame containing network data, ideally output GetNodeDF() function containing edges, nodes weights. node_size numeric value specifying size nodes plot (default: 20). node_color character defining color nodes (default: \"blue\"). node_text_size numeric value specifying size text labels nodes (default: 4). edge_width_factor numeric value specifying scaling factor applied edge weights determine edge width (default: 50). edge_color character specifying color edges (default: \"red\"). network_layout character defining layout algorithm use positioning nodes (default: \"fr\"). Common options include `\"fr\"` (Fruchterman–Reingold), `\"kk\"` (Kamada–Kawai), Large Graph Layout `\"lgl\"` legend_title character specifying title legend (default: \"Scaled Counts\"). legend_position character specifying position plot legend (default: \"bottom\"). Options include `\"bottom\"`, `\"top\"`, `\"left\"`, `\"right\"` . min_edge_width numeric value defining minimum width edges (default: 0.5). max_edge_width numeric value defining maximum width edges (default: 3). main character specifying main title plot (default: \"Network Plot\"). main_size numeric value specifying text size main plot title (default: 15). hjust numeric value defining horizontal justification main title (default: 0.5, centered). legend_text_size numeric value specifying text size legend (default: 12). legend_title_size numeric value specifying size legend title (default: 14).","code":""},{"path":"https://sidex71.github.io/ULM/reference/PlotNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotting network — PlotNetwork","text":"`ggplot`  `ggraph` object representing cell-cell interaction network visualization.","code":""},{"path":"https://sidex71.github.io/ULM/reference/PlotNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotting network — PlotNetwork","text":"","code":"my_network_df <- data.frame(Cell1 =c('A', 'B', 'C', 'D', 'E', 'F'),                             Cell2= c('D', 'A', 'F', 'C', 'F', 'B'),                             n_cells = c(20, 40, 60, 80, 100, 120))  PlotNetwork(network_df = my_network_df)"},{"path":"https://sidex71.github.io/ULM/news/index.html","id":"ulm-010-development-version","dir":"Changelog","previous_headings":"","what":"ULM 0.1.0 (development version)","title":"ULM 0.1.0 (development version)","text":"Initial submission.","code":""}]
